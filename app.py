# -*- coding: utf-8 -*-
"""Code for MarkettoMarketPricingSuggestor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Lfj_13JeZbxeRufeiciO0XyWAuqmuiZ
"""

pip install streamlit xgboost pandas scikit-learn

import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from xgboost import XGBClassifier
import os

def load_data():
    df = pd.read_csv("Pricing Data.csv", low_memory=False)
    df.columns = df.columns.str.strip()

    # Force clean for numeric columns
    for col in ['RPM', 'Miles', 'Trips Per Week']:
        df[col] = df[col].astype(str).str.replace(r'[^\d.]', '', regex=True)
        df[col] = pd.to_numeric(df[col], errors='coerce')

    # Drop all rows with missing critical values
    df = df.dropna(subset=['RPM', 'Miles', 'Trips Per Week', 'Origin Market', 'Dest Market', 'Results'])

    # Binary encode win/loss
    df['Win'] = df['Results'].str.lower().eq('won').astype(int)

    print("âœ… Loaded rows:", len(df))
    return df




# Train model
def train_model(df):
    X = df[['RPM', 'Miles', 'Trips Per Week', 'Origin Market', 'Dest Market']]
    y = df['Win']
    scale_pos_weight = (y == 0).sum() / max((y == 1).sum(), 1)

    pipeline = Pipeline([
        ('preprocess', ColumnTransformer([
            ('num', StandardScaler(), ['RPM', 'Miles', 'Trips Per Week']),
            ('cat', OneHotEncoder(handle_unknown='ignore'), ['Origin Market', 'Dest Market'])
        ])),
        ('model', XGBClassifier(use_label_encoder=False, eval_metric='logloss', scale_pos_weight=scale_pos_weight))
    ])
    pipeline.fit(X, y)
    return pipeline

# Price calculator
def get_price_range(pairing_pct):
    paired_cost = 1.275
    full_cost = 2.55
    margin = 0.30
    blended = (paired_cost * pairing_pct + full_cost * (1 - pairing_pct)) * (1 + margin)
    return round(blended, 2)

# App UI
st.title("Market-to-Market Pricing Estimator")

df = load_data()
pipeline = train_model(df)

# User Inputs
contact = st.text_input("Your Contact Info (email/phone):")
origin = st.selectbox("Origin Market", sorted(df['Origin Market'].unique()))
dest = st.selectbox("Destination Market", sorted(df['Dest Market'].unique()))
trips = st.slider("Trips Per Week", 1, 20, 5)

# Show pricing range
low = get_price_range(0.9)
mid = get_price_range(0.7)
high = get_price_range(0.5)
st.write(f"### Suggested Price Range (per mile):")
st.success(f"Low: ${low} | Mid: ${mid} | High: ${high}")

# User selects their target
selected_price = st.slider("Select price you're willing to discuss", low, high, mid, step=0.01)

# Submit button
if st.button("Submit Interest to Sales Rep"):
    # Record new feedback
    df_new = pd.DataFrame([{
        'Origin Market': origin,
        'Dest Market': dest,
        'RPM': selected_price,
        'Miles': df['Miles'].median(),
        'Trips Per Week': trips,
        'Results': 'Won'
    }] + [
        {
            'Origin Market': origin,
            'Dest Market': dest,
            'RPM': rpm,
            'Miles': df['Miles'].median(),
            'Trips Per Week': trips,
            'Results': 'Lost'
        } for rpm in [p for p in [low, mid, high] if p != selected_price]
    ])

    # Append to data file
    df_out = pd.concat([df, df_new], ignore_index=True)
    df_out.to_csv("Pricing Data.csv", index=False)

    st.success("Thanks! A sales rep will be in touch. Model updated.")

cd path/to/your/project
